<program> ::= <stmtlist>

<stmtlist> ::= <stmt> <stmtlist>
<stmtlist> ::= EPSILON

<stmt> ::= import <identifier> <endl>
<stmt> ::= <endl>
<stmt> ::= <expr> <endl>
<stmt> ::= <assignment> <endl>
<stmt> ::= <functiondef> <endl>
<stmt> ::= <if> <endl>
<stmt> ::= <forloop> <endl>
<stmt> ::= <whileloop> <endl>
<stmt> ::= return <expr> <endl>
<stmt> ::= break <endl>
<stmt> ::= continue <endl>

<functiondef> ::= function <identifier> <parameters> <endl> <stmtlist> end

<parameters> ::= EPSILON
<parameters> ::= ( <parameters'>
<parameters'> ::= )
<parameters'> ::= <paramdecl> )

<paramdecl> ::= <identifier> <paramdecl'>
<paramdecl'> ::= , <paramdecl'>
<paramdecl'> ::= EPSILON

<if> ::= if <condition> then <endl> <stmtlist> <elseif>

<elseif> ::= else <elseif'>
<elseif> ::= end
<elseif'> ::= <endl> <stmtlist> end
<elseif'> ::= <if>

<forloop> ::= for <identifier> = <arithmetic> to <arithmetic> do <endl> <stmtlist> loop

<whileloop> ::= while <condition> do <endl> <stmtlist> loop

<assignment> ::= <l-value> = <condition>

<l-value> ::= <identifier>
<l-value> ::= ( <l-value> )
<l-value> ::= <identifier> <l-value'>
<l-value> ::= ( <l-value> ) <l-value'>
<l-value'> ::= <reference'> <l-value''> <l-value'>
<l-value'> ::= EPSILON
<l-value''> ::= . <identifier>
<l-value''> ::= [ <expr> ]

<reference> ::= <l-value> <reference'>
<reference'> ::= ( <reference''>
<reference'> ::= EPSILON
<reference''> ::= <arguments> ) <reference'>
<reference''> ::= ) <reference'>

<expr> ::= <condition>

<condition> ::= <logic> <condition'>
<condition'> ::= and <logic> <condition'>
<condition'> ::= or <logic> <condition'>
<condition'> ::= EPSILON

<logic> ::= not <comparison>
<logic> ::= <comparison>

<comparison> ::= <arithmetic> <comparison'>
<comparison'> ::= == <arithmetic> <comparison'>
<comparison'> ::= != <arithmetic> <comparison'>
<comparison'> ::= \< <arithmetic> <comparison'>
<comparison'> ::= > <arithmetic> <comparison'>
<comparison'> ::= \<= <arithmetic> <comparison'>
<comparison'> ::= >= <arithmetic> <comparison'>
<comparison'> ::= EPSILON

<arithmetic> ::= <term> <arithmetic'>
<arithmetic'> ::= + <term> <arithmetic'>
<arithmetic'> ::= - <term> <arithmetic'>
<arithmetic'> ::= EPSILON

<term> ::= <factor> <term'>
<term'> ::= * <factor> <term'>
<term'> ::= / <factor> <term'>
<term'> ::= EPSILON

<factor> ::= - <factor>
<factor> ::= ! <factor>
<factor> ::= <final>

<final> ::= ( <expr> )
<final> ::= <boolean>
<final> ::= <nill>
<final> ::= <integer>
<final> ::= <float>
<final> ::= <string>
<final> ::= <object>
<final> ::= <reference>

<arguments> ::= <expr> <arguments'>
<arguments'> ::= , <expr> <arguments'>
<arguments'> ::= EPSILON

<object> ::= [ <object'>
<object'> ::= ]
<object'> ::= <arrayinit> ]

<arrayinit> ::= <expr> <arrayinit'>
<arrayinit'> ::= , <expr> <arrayinit'>
<arrayinit'> ::= EPSILON

<boolean> ::= true
<boolean> ::= false

<nill> ::= nill
