<program> -> <stmtlist>

<stmtlist> -> <stmt> <stmtlist>
<stmtlist> -> EPSILON

<stmt> -> import <identifier> <endl>
<stmt> -> <endl>
<stmt> -> <l-value> <lvstmt> <endl>
<stmt> -> <functiondef> <endl>
<stmt> -> <if> <endl>
<stmt> -> <forloop> <endl>
<stmt> -> <whileloop> <endl>
<stmt> -> <indefiniteloop> <endl>
<stmt> -> return <expr> <endl>
<stmt> -> break <endl>
<stmt> -> continue <endl>

<lvstmt> -> <assignment>
<lvstmt> -> <call>

<call> -> ( <call1>
<call1> -> )
<call1> -> <arguments> )

<functiondef> -> function <identifier> <parameters> <endl> <stmtlist> end

<parameters> -> ( <parameters1>
<parameters1> -> )
<parameters1> -> <paramdecl> )

<paramdecl> -> <identifier> <paramdecl1>
<paramdecl1> -> , <identifier> <paramdecl1>
<paramdecl1> -> EPSILON 

<if> -> if <condition> then <endl> <stmtlist> <elseif1>
<elseif1> -> else <elseif2>
<elseif1> -> end
<elseif2> -> <endl> <stmtlist> end
<elseif2> -> <if>

<forloop> -> for <identifier> = <arithmetic> to <arithmetic> do <endl> <stmtlist> loop

<whileloop> -> while <condition> do <endl> <stmtlist> loop

<indefiniteloop> -> iterate <endl> <stmtlist> loop

<assignment> -> = <condition>

<expr> -> <condition>

<condition> -> <logic> <condition1>
<condition1> -> and <logic> <condition1>
<condition1> -> or <logic> <condition1>
<condition1> -> EPSILON

<logic> -> not <comparison>
<logic> -> <comparison>

<comparison> -> <arithmetic> <comparison1>
<comparison1> -> == <arithmetic> <comparison1>
<comparison1> -> != <arithmetic> <comparison1>
<comparison1> -> \< <arithmetic> <comparison1>
<comparison1> -> > <arithmetic> <comparison1>
<comparison1> -> \<= <arithmetic> <comparison1>
<comparison1> -> >= <arithmetic> <comparison1>
<comparison1> -> EPSILON

<arithmetic> -> <term> <arithmetic1>
<arithmetic1> -> + <term> <arithmetic1>
<arithmetic1> -> - <term> <arithmetic1>
<arithmetic1> -> EPSILON

<term> -> <factor> <term1>
<term1> -> * <factor> <term1>
<term1> -> / <factor> <term1>
<term1> -> EPSILON

<factor> -> - <factor>
<factor> -> ! <factor>
<factor> -> <final>

<final> -> ( <expr> )
<final> -> <boolean>
<final> -> <integer>
<final> -> <float>
<final> -> <string>
<final> -> <object>
<final> -> <reference>
<final> -> <nill>

<l-value> -> <identifier> <l-value1>
<l-value1> -> EPSILON
<l-value1> -> . <identifier> <l-value1>
<l-value1> -> [ <expr> ] <l-value1>

<reference> -> <l-value> <reference1>
<reference1> -> EPSILON
<reference1> -> ( <reference2>
<reference2> -> ) <reference1>
<reference2> -> <arguments> ) <reference1>

<arguments> -> <expr> <arguments1>
<arguments1> -> EPSILON
<arguments1> -> , <expr> <arguments1>

<object> -> [ <object1>
<object> -> { <dictionaryinit> }
<object1> -> ]
<object1> -> <arrayinit> ]

<arrayinit> -> <expr> <arrayinit1>
<arrayinit1> -> EPSILON
<arrayinit1> -> , <expr> <arrayinit1>

<dictionaryinit> -> <identifier> : <expr> <dictionaryinit1>
<dictionaryinit1> -> EPSILON
<dictionaryinit1> -> , <identifier> : <expr> <dictionaryinit1>

<boolean> -> true
<boolean> -> false

